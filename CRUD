#include <stdio.h>
#include <string.h>

#define MAX_PECAS 100
#define TAM_STR 50

struct Peca {
    char nome[TAM_STR];
    char tamanho[TAM_STR];
    int quantidade;
    char material[TAM_STR];
};

struct Peca estoque[MAX_PECAS];
int totalPecas = 0;

void limparEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void adicionarPeca() {
    if (totalPecas >= MAX_PECAS) {
        printf("Estoque cheio. Nao e possivel adicionar mais pecas.\n");
        return;
    }

    struct Peca nova;

    printf("\n-- Entrada de Peca --\n");

    printf("Nome da peca: ");
    limparEntrada();
    fgets(nova.nome, TAM_STR, stdin);
    nova.nome[strcspn(nova.nome, "\n")] = '\0'; // Remove o \n

    printf("Tamanho: ");
    fgets(nova.tamanho, TAM_STR, stdin);
    nova.tamanho[strcspn(nova.tamanho, "\n")] = '\0';

    printf("Quantidade: ");
    scanf("%d", &nova.quantidade);
    limparEntrada();

    printf("Material: ");
    fgets(nova.material, TAM_STR, stdin);
    nova.material[strcspn(nova.material, "\n")] = '\0';

    estoque[totalPecas++] = nova;

    printf("Peca adicionada com sucesso!\n");
}

void removerPeca() {
    char nomeBusca[TAM_STR];
    int quantidadeRemover;

    printf("\n-- Saida de Peca --\n");
    printf("Nome da peca a remover: ");
    limparEntrada();
    fgets(nomeBusca, TAM_STR, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0';

    int encontrada = 0;
    for (int i = 0; i < totalPecas; i++) {
        if (strcmp(estoque[i].nome, nomeBusca) == 0) {
            printf("Quantidade a remover: ");
            scanf("%d", &quantidadeRemover);

            if (quantidadeRemover <= estoque[i].quantidade) {
                estoque[i].quantidade -= quantidadeRemover;
                printf("Quantidade removida com sucesso.\n");

                // Remove a peÃ§a se quantidade zerar
                if (estoque[i].quantidade == 0) {
                    for (int j = i; j < totalPecas - 1; j++) {
                        estoque[j] = estoque[j + 1];
                    }
                    totalPecas--;
                }
            } else {
                printf("Quantidade insuficiente no estoque.\n");
            }
            encontrada = 1;
            break;
        }
    }

    if (!encontrada) {
        printf("Peca nao encontrada.\n");
    }
}

void listarPecas() {
    printf("\n-- Estoque Atual --\n");
    if (totalPecas == 0) {
        printf("Nenhuma peca no estoque.\n");
        return;
    }

    for (int i = 0; i < totalPecas; i++) {
        printf("Nome: %s | Tamanho: %s | Quantidade: %d | Material: %s\n",
               estoque[i].nome, estoque[i].tamanho, estoque[i].quantidade, estoque[i].material);
    }
}

void buscarPeca() {
    char nomeBusca[TAM_STR];
    printf("\n-- Buscar Peca --\n");
    printf("Digite o nome da peca: ");
    limparEntrada();
    fgets(nomeBusca, TAM_STR, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = '\0';

    int encontrada = 0;
    for (int i = 0; i < totalPecas; i++) {
        if (strcmp(estoque[i].nome, nomeBusca) == 0) {
            printf("Encontrado: Nome: %s | Tamanho: %s | Quantidade: %d | Material: %s\n",
                   estoque[i].nome, estoque[i].tamanho, estoque[i].quantidade, estoque[i].material);
            encontrada = 1;
        }
    }

    if (!encontrada) {
        printf("Peca nao encontrada.\n");
    }
}

int main() {
    int opcao;

    do {
        printf("\n===== CONTROLE DE ESTOQUE DE PECAS =====\n");
        printf("1. Adicionar Peca (Entrada)\n");
        printf("2. Remover Peca (Saida)\n");
        printf("3. Listar Pecas\n");
        printf("4. Buscar Peca por Nome\n");
        printf("5. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                adicionarPeca();
                break;
            case 2:
                removerPeca();
                break;
            case 3:
                listarPecas();
                break;
            case 4:
                buscarPeca();
                break;
            case 5:
                printf("Saindo...\n");
                break;
            default:
                printf("Opcao invalida!\n");
        }
    } while (opcao != 5);

    return 0;
}
